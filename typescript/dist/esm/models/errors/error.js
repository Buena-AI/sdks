/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as models from "../index.js";
import { SDKError } from "./sdkerror.js";
export class ErrorT extends SDKError {
    constructor(err, httpMeta) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.error = err.error;
        if (err.details != null)
            this.details = err.details;
        this.name = "ErrorT";
    }
}
/** @internal */
export const ErrorT$inboundSchema = z
    .object({
    error: z.string(),
    message: z.string(),
    details: z.lazy(() => models.Details$inboundSchema).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new ErrorT(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const ErrorT$outboundSchema = z.instanceof(ErrorT)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.string(),
    message: z.string(),
    details: z.lazy(() => models.Details$outboundSchema).optional(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ErrorT$;
(function (ErrorT$) {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    ErrorT$.inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    ErrorT$.outboundSchema = ErrorT$outboundSchema;
})(ErrorT$ || (ErrorT$ = {}));
//# sourceMappingURL=error.js.map