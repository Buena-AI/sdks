/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const ApiKey$inboundSchema = z
    .object({
    id: z.string().optional(),
    name: z.string().optional(),
    key: z.string().optional(),
    permissions: z.array(z.string()).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    last_used: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "last_used": "lastUsed",
    });
});
/** @internal */
export const ApiKey$outboundSchema = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    key: z.string().optional(),
    permissions: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        lastUsed: "last_used",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApiKey$;
(function (ApiKey$) {
    /** @deprecated use `ApiKey$inboundSchema` instead. */
    ApiKey$.inboundSchema = ApiKey$inboundSchema;
    /** @deprecated use `ApiKey$outboundSchema` instead. */
    ApiKey$.outboundSchema = ApiKey$outboundSchema;
})(ApiKey$ || (ApiKey$ = {}));
export function apiKeyToJSON(apiKey) {
    return JSON.stringify(ApiKey$outboundSchema.parse(apiKey));
}
export function apiKeyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApiKey$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApiKey' from JSON`);
}
//# sourceMappingURL=apikey.js.map