/* tslint:disable */
/* eslint-disable */
/**
 * Buena.ai API v2
 * The most powerful LinkedIn automation and lead management API for modern sales teams and developers.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@buena.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     * Unique identifier for the API key
     * @type {string}
     * @memberof ApiKey
     */
    'id'?: string;
    /**
     * Name of the API key
     * @type {string}
     * @memberof ApiKey
     */
    'name'?: string;
    /**
     * The actual API key (only shown once during creation)
     * @type {string}
     * @memberof ApiKey
     */
    'key'?: string;
    /**
     * List of permissions
     * @type {Array<string>}
     * @memberof ApiKey
     */
    'permissions'?: Array<string>;
    /**
     * When the key was created
     * @type {string}
     * @memberof ApiKey
     */
    'created_at'?: string;
    /**
     * When the key was last used
     * @type {string}
     * @memberof ApiKey
     */
    'last_used'?: string;
}
/**
 * 
 * @export
 * @interface CreateApiKeyRequest
 */
export interface CreateApiKeyRequest {
    /**
     * Name for the API key
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    'name'?: string;
    /**
     * List of permissions for the key
     * @type {Array<string>}
     * @memberof CreateApiKeyRequest
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateLeadRequest
 */
export interface CreateLeadRequest {
    /**
     * First name of the lead
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'first_name': string;
    /**
     * Last name of the lead
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'last_name': string;
    /**
     * Email address of the lead
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'email'?: string;
    /**
     * Company name
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'company'?: string;
    /**
     * Job title
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'title'?: string;
    /**
     * LinkedIn profile URL
     * @type {string}
     * @memberof CreateLeadRequest
     */
    'linkedin_url'?: string;
}
/**
 * 
 * @export
 * @interface DeleteVoiceCloneResponse
 */
export interface DeleteVoiceCloneResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteVoiceCloneResponse
     */
    'success'?: boolean;
    /**
     * Success message
     * @type {string}
     * @memberof DeleteVoiceCloneResponse
     */
    'message'?: string;
    /**
     * The ID of the voice clone that was deleted
     * @type {string}
     * @memberof DeleteVoiceCloneResponse
     */
    'deleted_id'?: string;
}
/**
 * 
 * @export
 * @interface HealthCheck200Response
 */
export interface HealthCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200Response
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200Response
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface Lead
 */
export interface Lead {
    /**
     * Unique identifier for the lead
     * @type {string}
     * @memberof Lead
     */
    'id'?: string;
    /**
     * First name of the lead
     * @type {string}
     * @memberof Lead
     */
    'first_name'?: string;
    /**
     * Last name of the lead
     * @type {string}
     * @memberof Lead
     */
    'last_name'?: string;
    /**
     * Email address of the lead
     * @type {string}
     * @memberof Lead
     */
    'email'?: string;
    /**
     * Company name
     * @type {string}
     * @memberof Lead
     */
    'company'?: string;
    /**
     * Job title
     * @type {string}
     * @memberof Lead
     */
    'title'?: string;
    /**
     * LinkedIn profile URL
     * @type {string}
     * @memberof Lead
     */
    'linkedin_url'?: string;
    /**
     * Current status of the lead
     * @type {string}
     * @memberof Lead
     */
    'status'?: LeadStatusEnum;
    /**
     * When the lead was created
     * @type {string}
     * @memberof Lead
     */
    'created_at'?: string;
    /**
     * When the lead was last updated
     * @type {string}
     * @memberof Lead
     */
    'updated_at'?: string;
}

export const LeadStatusEnum = {
    New: 'new',
    Contacted: 'contacted',
    Responded: 'responded',
    Converted: 'converted',
    Unqualified: 'unqualified'
} as const;

export type LeadStatusEnum = typeof LeadStatusEnum[keyof typeof LeadStatusEnum];

/**
 * 
 * @export
 * @interface ListLeads200Response
 */
export interface ListLeads200Response {
    /**
     * 
     * @type {Array<Lead>}
     * @memberof ListLeads200Response
     */
    'leads'?: Array<Lead>;
    /**
     * 
     * @type {number}
     * @memberof ListLeads200Response
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {boolean}
     * @memberof ModelError
     */
    'success': boolean;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
    /**
     * Additional error details
     * @type {string}
     * @memberof ModelError
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface UpdateVoiceCloneRequest
 */
export interface UpdateVoiceCloneRequest {
    /**
     * Updated name for the voice clone
     * @type {string}
     * @memberof UpdateVoiceCloneRequest
     */
    'name'?: string;
    /**
     * Updated description of the voice clone
     * @type {string}
     * @memberof UpdateVoiceCloneRequest
     */
    'description'?: string;
    /**
     * Enable/disable the voice clone
     * @type {boolean}
     * @memberof UpdateVoiceCloneRequest
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateVoiceCloneResponse
 */
export interface UpdateVoiceCloneResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateVoiceCloneResponse
     */
    'success'?: boolean;
    /**
     * Success message
     * @type {string}
     * @memberof UpdateVoiceCloneResponse
     */
    'message'?: string;
    /**
     * 
     * @type {UpdateVoiceCloneResponseData}
     * @memberof UpdateVoiceCloneResponse
     */
    'data'?: UpdateVoiceCloneResponseData;
}
/**
 * 
 * @export
 * @interface UpdateVoiceCloneResponseData
 */
export interface UpdateVoiceCloneResponseData {
    /**
     * Updated name for the voice clone
     * @type {string}
     * @memberof UpdateVoiceCloneResponseData
     */
    'name'?: string;
    /**
     * Updated description of the voice clone
     * @type {string}
     * @memberof UpdateVoiceCloneResponseData
     */
    'description'?: string;
    /**
     * Updated active status
     * @type {boolean}
     * @memberof UpdateVoiceCloneResponseData
     */
    'isActive'?: boolean;
    /**
     * When the voice clone was last updated
     * @type {string}
     * @memberof UpdateVoiceCloneResponseData
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface VoiceClone
 */
export interface VoiceClone {
    /**
     * Unique voice clone identifier
     * @type {string}
     * @memberof VoiceClone
     */
    'voiceId'?: string;
    /**
     * User-defined name for the voice clone
     * @type {string}
     * @memberof VoiceClone
     */
    'name'?: string;
    /**
     * Description of the voice clone
     * @type {string}
     * @memberof VoiceClone
     */
    'description'?: string;
    /**
     * Whether the voice clone is active and available for use
     * @type {boolean}
     * @memberof VoiceClone
     */
    'isActive'?: boolean;
    /**
     * Number of audio samples used to train this voice
     * @type {number}
     * @memberof VoiceClone
     */
    'sampleCount'?: number;
    /**
     * When the voice clone was created
     * @type {string}
     * @memberof VoiceClone
     */
    'createdAt'?: string;
    /**
     * When the voice clone was last updated
     * @type {string}
     * @memberof VoiceClone
     */
    'updatedAt'?: string;
    /**
     * Metadata labels associated with the voice clone
     * @type {object}
     * @memberof VoiceClone
     */
    'labels'?: object;
}
/**
 * 
 * @export
 * @interface VoiceCloneListResponse
 */
export interface VoiceCloneListResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VoiceCloneListResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {VoiceCloneListResponseData}
     * @memberof VoiceCloneListResponse
     */
    'data'?: VoiceCloneListResponseData;
}
/**
 * 
 * @export
 * @interface VoiceCloneListResponseData
 */
export interface VoiceCloneListResponseData {
    /**
     * 
     * @type {Array<VoiceClone>}
     * @memberof VoiceCloneListResponseData
     */
    'voiceClones'?: Array<VoiceClone>;
    /**
     * Total number of voice clones for the user
     * @type {number}
     * @memberof VoiceCloneListResponseData
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface VoiceCloneResponse
 */
export interface VoiceCloneResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VoiceCloneResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {VoiceCloneResponseData}
     * @memberof VoiceCloneResponse
     */
    'data'?: VoiceCloneResponseData;
    /**
     * Success message
     * @type {string}
     * @memberof VoiceCloneResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface VoiceCloneResponseData
 */
export interface VoiceCloneResponseData {
    /**
     * Unique voice clone identifier
     * @type {string}
     * @memberof VoiceCloneResponseData
     */
    'voiceId'?: string;
    /**
     * User-defined name for the voice clone
     * @type {string}
     * @memberof VoiceCloneResponseData
     */
    'name'?: string;
    /**
     * Description of the voice clone
     * @type {string}
     * @memberof VoiceCloneResponseData
     */
    'description'?: string;
    /**
     * Number of audio samples uploaded for training
     * @type {number}
     * @memberof VoiceCloneResponseData
     */
    'sampleCount'?: number;
    /**
     * When the voice clone was created
     * @type {string}
     * @memberof VoiceCloneResponseData
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface VoicePreviewRequest
 */
export interface VoicePreviewRequest {
    /**
     * The ID of the voice clone to use for preview generation
     * @type {string}
     * @memberof VoicePreviewRequest
     */
    'voiceId': string;
    /**
     * Text to synthesize into speech (1-500 characters)
     * @type {string}
     * @memberof VoicePreviewRequest
     */
    'text': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new API key
         * @summary Create API Key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (createApiKeyRequest: CreateApiKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createApiKeyRequest' is not null or undefined
            assertParamExists('createApiKey', 'createApiKeyRequest', createApiKeyRequest)
            const localVarPath = `/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApiKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new lead
         * @summary Create Lead
         * @param {CreateLeadRequest} createLeadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLead: async (createLeadRequest: CreateLeadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLeadRequest' is not null or undefined
            assertParamExists('createLead', 'createLeadRequest', createLeadRequest)
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLeadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new voice clone from audio file uploads
         * @summary Create Voice Clone
         * @param {string} name Descriptive name for the voice clone
         * @param {Array<File>} files Audio files for voice training (1-10 files, max 50MB each)
         * @param {string} [description] Optional description of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoiceClone: async (name: string, files: Array<File>, description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createVoiceClone', 'name', name)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('createVoiceClone', 'files', files)
            const localVarPath = `/voice-clones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently delete a voice clone
         * @summary Delete Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoiceClone: async (voiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('deleteVoiceClone', 'voiceId', voiceId)
            const localVarPath = `/voice-clones/{voiceId}`
                .replace(`{${"voiceId"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a voice preview using a voice clone to test quality
         * @summary Generate Voice Preview
         * @param {VoicePreviewRequest} voicePreviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoicePreview: async (voicePreviewRequest: VoicePreviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voicePreviewRequest' is not null or undefined
            assertParamExists('generateVoicePreview', 'voicePreviewRequest', voicePreviewRequest)
            const localVarPath = `/voice-clones/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voicePreviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check the API status and health
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all API keys for the user
         * @summary List API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of leads with optional filtering
         * @summary List Leads
         * @param {number} [limit] Maximum number of leads to return
         * @param {number} [offset] Number of leads to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLeads: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all voice clones for the authenticated user
         * @summary List Voice Clones
         * @param {number} [limit] Number of voice clones to return (1-100)
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVoiceClones: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/voice-clones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update voice clone settings and metadata
         * @summary Update Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {UpdateVoiceCloneRequest} updateVoiceCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoiceClone: async (voiceId: string, updateVoiceCloneRequest: UpdateVoiceCloneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceId' is not null or undefined
            assertParamExists('updateVoiceClone', 'voiceId', voiceId)
            // verify required parameter 'updateVoiceCloneRequest' is not null or undefined
            assertParamExists('updateVoiceClone', 'updateVoiceCloneRequest', updateVoiceCloneRequest)
            const localVarPath = `/voice-clones/{voiceId}`
                .replace(`{${"voiceId"}}`, encodeURIComponent(String(voiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVoiceCloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new API key
         * @summary Create API Key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(createApiKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createApiKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new lead
         * @summary Create Lead
         * @param {CreateLeadRequest} createLeadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLead(createLeadRequest: CreateLeadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLead(createLeadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createLead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new voice clone from audio file uploads
         * @summary Create Voice Clone
         * @param {string} name Descriptive name for the voice clone
         * @param {Array<File>} files Audio files for voice training (1-10 files, max 50MB each)
         * @param {string} [description] Optional description of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVoiceClone(name: string, files: Array<File>, description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceCloneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVoiceClone(name, files, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createVoiceClone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Permanently delete a voice clone
         * @summary Delete Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoiceClone(voiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteVoiceCloneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoiceClone(voiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteVoiceClone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a voice preview using a voice clone to test quality
         * @summary Generate Voice Preview
         * @param {VoicePreviewRequest} voicePreviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVoicePreview(voicePreviewRequest: VoicePreviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVoicePreview(voicePreviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.generateVoicePreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check the API status and health
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all API keys for the user
         * @summary List API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiKeys(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiKey>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiKeys(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listApiKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of leads with optional filtering
         * @summary List Leads
         * @param {number} [limit] Maximum number of leads to return
         * @param {number} [offset] Number of leads to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLeads(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLeads200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLeads(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listLeads']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all voice clones for the authenticated user
         * @summary List Voice Clones
         * @param {number} [limit] Number of voice clones to return (1-100)
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVoiceClones(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoiceCloneListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVoiceClones(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listVoiceClones']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update voice clone settings and metadata
         * @summary Update Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {UpdateVoiceCloneRequest} updateVoiceCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoiceClone(voiceId: string, updateVoiceCloneRequest: UpdateVoiceCloneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateVoiceCloneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoiceClone(voiceId, updateVoiceCloneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateVoiceClone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create a new API key
         * @summary Create API Key
         * @param {CreateApiKeyRequest} createApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.createApiKey(createApiKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new lead
         * @summary Create Lead
         * @param {CreateLeadRequest} createLeadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLead(createLeadRequest: CreateLeadRequest, options?: RawAxiosRequestConfig): AxiosPromise<Lead> {
            return localVarFp.createLead(createLeadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new voice clone from audio file uploads
         * @summary Create Voice Clone
         * @param {string} name Descriptive name for the voice clone
         * @param {Array<File>} files Audio files for voice training (1-10 files, max 50MB each)
         * @param {string} [description] Optional description of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoiceClone(name: string, files: Array<File>, description?: string, options?: RawAxiosRequestConfig): AxiosPromise<VoiceCloneResponse> {
            return localVarFp.createVoiceClone(name, files, description, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently delete a voice clone
         * @summary Delete Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoiceClone(voiceId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteVoiceCloneResponse> {
            return localVarFp.deleteVoiceClone(voiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a voice preview using a voice clone to test quality
         * @summary Generate Voice Preview
         * @param {VoicePreviewRequest} voicePreviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoicePreview(voicePreviewRequest: VoicePreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.generateVoicePreview(voicePreviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the API status and health
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheck200Response> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * List all API keys for the user
         * @summary List API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiKey>> {
            return localVarFp.listApiKeys(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of leads with optional filtering
         * @summary List Leads
         * @param {number} [limit] Maximum number of leads to return
         * @param {number} [offset] Number of leads to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLeads(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListLeads200Response> {
            return localVarFp.listLeads(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all voice clones for the authenticated user
         * @summary List Voice Clones
         * @param {number} [limit] Number of voice clones to return (1-100)
         * @param {number} [offset] Pagination offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVoiceClones(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<VoiceCloneListResponse> {
            return localVarFp.listVoiceClones(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update voice clone settings and metadata
         * @summary Update Voice Clone
         * @param {string} voiceId The unique identifier of the voice clone
         * @param {UpdateVoiceCloneRequest} updateVoiceCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoiceClone(voiceId: string, updateVoiceCloneRequest: UpdateVoiceCloneRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateVoiceCloneResponse> {
            return localVarFp.updateVoiceClone(voiceId, updateVoiceCloneRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create a new API key
     * @summary Create API Key
     * @param {CreateApiKeyRequest} createApiKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createApiKey(createApiKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new lead
     * @summary Create Lead
     * @param {CreateLeadRequest} createLeadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createLead(createLeadRequest: CreateLeadRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createLead(createLeadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new voice clone from audio file uploads
     * @summary Create Voice Clone
     * @param {string} name Descriptive name for the voice clone
     * @param {Array<File>} files Audio files for voice training (1-10 files, max 50MB each)
     * @param {string} [description] Optional description of the voice clone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVoiceClone(name: string, files: Array<File>, description?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createVoiceClone(name, files, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently delete a voice clone
     * @summary Delete Voice Clone
     * @param {string} voiceId The unique identifier of the voice clone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVoiceClone(voiceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteVoiceClone(voiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a voice preview using a voice clone to test quality
     * @summary Generate Voice Preview
     * @param {VoicePreviewRequest} voicePreviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateVoicePreview(voicePreviewRequest: VoicePreviewRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).generateVoicePreview(voicePreviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check the API status and health
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all API keys for the user
     * @summary List API Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApiKeys(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listApiKeys(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of leads with optional filtering
     * @summary List Leads
     * @param {number} [limit] Maximum number of leads to return
     * @param {number} [offset] Number of leads to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listLeads(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listLeads(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all voice clones for the authenticated user
     * @summary List Voice Clones
     * @param {number} [limit] Number of voice clones to return (1-100)
     * @param {number} [offset] Pagination offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVoiceClones(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listVoiceClones(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update voice clone settings and metadata
     * @summary Update Voice Clone
     * @param {string} voiceId The unique identifier of the voice clone
     * @param {UpdateVoiceCloneRequest} updateVoiceCloneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVoiceClone(voiceId: string, updateVoiceCloneRequest: UpdateVoiceCloneRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateVoiceClone(voiceId, updateVoiceCloneRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



